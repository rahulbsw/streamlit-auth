{"version":3,"sources":["components/NavBar.js","utils/history.js","utils/initFontAwesome.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","onRun","useAuth","user","isAuthenticated","signinPopup","signinRedirect","signoutRedirect","token","access_token","className","Container","Button","color","onClick","popup_redirect_uri","window","location","origin","then","returnTo","createBrowserHistory","initFontAwesome","library","add","faLink","faUser","faPowerOff","_","require","App","isEqual","state","Streamlit","setComponentValue","setState","oidcConfig","onSignIn","a","alert","console","log","authority","clientId","clientSecret","scope","responseType","redirectUri","this","id","StreamlitComponentBase","withStreamlitConnection","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qYAuFeA,EA/DA,SAACC,GAEd,IAAIC,EAASD,EAAK,MAAL,MAIb,GAHgBA,EAAK,MAAL,UASZE,eALFC,EADF,EACEA,KACAC,EAFF,EAEEA,gBAEAC,GAJF,EAGEC,eAHF,EAIED,aACAE,EALF,EAKEA,gBAiBF,GAAIH,EAAgB,CACd,IAAMI,EAAK,OAAGL,QAAH,IAAGA,OAAH,EAAGA,EAAMM,aACpBN,EAAI,MAAYK,EAChBP,EAAME,QAENF,GAAM,GAGZ,OACE,yBAAKS,UAAU,iBACb,kBAACC,EAAA,EAAD,CAAWD,UAAU,oBACbN,GACE,kBAACQ,EAAA,EAAD,CACEC,MAAM,UACNH,UAAU,aACVI,QAAS,WACLT,EAAY,CAACU,mBAAoBC,OAAOC,SAASC,SAASC,MAAK,WAAKlB,GAAM,QAJhF,UAUHG,GACG,kBAACQ,EAAA,EAAD,CACAE,QAAS,WArCrBP,EAAgB,CACda,SAAUJ,OAAOC,SAASC,WAmChB,a,WC1EDG,c,qBCQAC,MANf,WACEC,IAAQC,IAAIC,KACZF,IAAQC,IAAIE,KACZH,IAAQC,IAAIG,MCkBVC,EAAIC,EAAQ,IAEhBP,I,IACMQ,E,kDAEJ,WAAY9B,GAAO,IAAD,8BAChB,cAAMA,IAIRC,MAAQ,SAACE,GACDyB,EAAEG,QAAQ5B,EAAM,EAAK6B,MAAM7B,QACrBA,EAMJA,EAAI,QAAYgB,MACd,SAACX,GACCL,EAAI,MAAYK,EAChByB,IAAUC,kBAAkB/B,GAC5B,EAAKgC,SAAS,CAAChC,KAAMA,QATzB8B,IAAUC,kBAAkB/B,GAC5B,EAAKgC,SAAS,CAAChC,KAAMA,OATb,EAwBlBiC,WAAa,CACTC,SAAS,WAAD,4BAAE,WAAOlC,GAAP,SAAAmC,EAAA,sDACRC,MAAM,wDACNC,QAAQC,IAAItC,GAFJ,2CAAF,mDAAC,GAKRuC,UAAW,EAAK1C,MAAL,0BACX2C,SAAU,EAAK3C,MAAL,yBACV4C,aAAc,EAAK5C,MAAL,6BACd6C,MAAO,EAAK7C,MAAL,sBACR8C,aAAc,WACdC,YAAa/B,OAAOC,SAASC,QAjC/B,EAAKc,MAAQ,CAAE7B,KAAM,MAFL,E,0CAuClB,WACE,OACA,kBAAC,IAAiB6C,KAAKZ,WACnB,yBAAKa,GAAG,OACN,kBAAC,EAAD,CAAQjD,MAAS,CAACC,MAAQ+C,KAAK/C,MAAMyC,UAAYM,KAAKhD,MAAL,mC,GA7CzCkD,KAoDHC,cAAwBrB,GCnEnBsB,QACW,cAA7BpC,OAAOC,SAASoC,UAEe,UAA7BrC,OAAOC,SAASoC,UAEhBrC,OAAOC,SAASoC,SAASC,MACvB,2DCQNC,IAASC,OAEL,kBAAC,EAAD,MAGFC,SAASC,eAAe,SDkGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,MAAK,SAAA2C,GACjCA,EAAaC,kB","file":"static/js/main.a4966a45.chunk.js","sourcesContent":["import React from \"react\";\nimport { NavLink as RouterNavLink } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// styles\nimport \"./NavBar.css\";\n// eslint-disable-next-line\nimport {\n  Container,\n  Nav,\n  NavItem,\n  Button,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n} from \"reactstrap\";\n\nimport {\n  Streamlit\n} from \"streamlit-component-lib\"\n\n// eslint-disable-next-line\nimport { useAuth } from \"react-oidc-context\";\n\nconst NavBar = (props) => {\n\n  var onRun  = props['props']['onRun']\n  var authority = props['props']['authority']\n\n  // eslint-disable-next-line\n  const {\n    user,\n    isAuthenticated,\n    signinRedirect,\n    signinPopup,\n    signoutRedirect\n  } = useAuth();\n\n  const logoutWithRedirect = () =>\n    signoutRedirect({\n      returnTo: window.location.origin,\n    });\n\n//  const getAccessToken = () => {\n//    return getAccessTokenSilently({\n//    // return getAccessTokenWithPopup({\n//      audience:`https://${domain}/api/v2/`,\n//      scope: \"read:current_user\",\n//    })\n//  }\n\n\n  if (isAuthenticated){\n        const token = user?.access_token\n        user['token'] = token;\n        onRun(user);\n  }else{\n        onRun(false)\n  }\n\n  return (\n    <div className=\"nav-container\">\n      <Container className=\"login-component\">\n            {!isAuthenticated && (\n                <Button\n                  color=\"primary\"\n                  className=\"btn-margin\"\n                  onClick={() => {\n                      signinPopup({popup_redirect_uri: window.location.origin}).then(()=>{onRun(false)})\n                }}\n                >\n                  Log in\n                </Button>\n            )}\n            {isAuthenticated && (\n                <Button\n                onClick={() => {\n                    logoutWithRedirect()\n                  }}\n                >Logout\n                </Button>\n            )}\n      </Container>\n    </div>\n  );\n};\n\nexport default NavBar;","import { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();\n","import { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faLink, faPowerOff, faUser } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction initFontAwesome() {\n  library.add(faLink);\n  library.add(faUser);\n  library.add(faPowerOff);\n}\n\nexport default initFontAwesome;\n","import React from \"react\";\nimport { Router } from \"react-router-dom\";\nimport { AuthProvider } from \"react-oidc-context\" ;\nimport { useAuth } from \"react-oidc-context\";\n\n\n\nimport NavBar from \"./components/NavBar\";\nimport history from \"./utils/history\";\nimport {\n  Button,\n} from \"reactstrap\";\n\nimport {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\n\n// styles\nimport \"./App.css\";\n\n// fontawesome\nimport initFontAwesome from \"./utils/initFontAwesome\";\nvar _ = require('lodash');\n\ninitFontAwesome();\nclass App extends StreamlitComponentBase {\n\n  constructor(props){\n    super(props)\n    this.state = { user: null };\n  }\n\n  onRun = (user) => {\n    if (! _.isEqual(user, this.state.user)){        \n          if (! user){\n            Streamlit.setComponentValue(user)\n            this.setState({user: user})\n          }\n\n          else {\n            user['token']().then(\n              (token) => {\n                user['token'] = token;\n                Streamlit.setComponentValue(user)\n                this.setState({user: user})\n              }\n            )\n          }\n      } \n  }\n\n  oidcConfig = {\n      onSignIn: async (user) => {\n        alert('You just signed in, congratz! Check out the console!');\n        console.log(user);\n        //window.location.hash = '';\n      },\n       authority: this.props['args']['auth_setup']['authority'],\n       clientId: this.props['args']['auth_setup']['clientId'],\n       clientSecret: this.props['args']['auth_setup']['clientSecret'],\n       scope: this.props['args']['auth_setup']['scope'],\n      responseType: 'id_token',\n      redirectUri: window.location.origin,\n    };\n\n\n  render(){\n    return (\n    <AuthProvider {...this.oidcConfig}>\n        <div id=\"app\" >\n          <NavBar props = {{onRun : this.onRun,authority : this.props['args']['auth_setup']['authority']}} />\n        </div>\n      </AuthProvider>\n    );\n  }}\n\n// export default App;\nexport default withStreamlitConnection(App)\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { AuthProvider } from \"react-oidc-context\" ;\nimport history from \"./utils/history\";\n// import { getConfig } from \"./config\";\n\nconst onRedirectCallback = (appState) => {\n  history.push(\n    appState && appState.returnTo ? appState.returnTo : window.location.pathname\n  );\n};\n\n// Please see https://auth0.github.io/auth0-react/interfaces/auth0_provider.auth0provideroptions.html\n// for a full list of the available properties on the provider\n\n// const providerConfig = {\n//   domain: config.domain,\n//   clientId: config.clientId,\n//   ...(config.audience ? { audience: config.audience } : null),\n//   redirectUri: window.location.origin,\n//   onRedirectCallback,\n// };\n\nReactDOM.render(\n  // <Auth0Provider {...providerConfig}>\n    <App />\n  // </Auth0Provider>,\n  ,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}